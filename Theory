Acid Properties
1. Atomicity : A transaction is either completed in its entirety or not at all. 
If a transaction encounters an error midway, all changes made within that transaction are rolled back, ensuring that the database remains in a consistent state.
2. Consistency : This property ensures that a transaction brings the database from one consistent state to another. In other words, the database follows a set of predefined rules and constraints, 
ensuring that data integrity is maintained even during the execution of complex operations.
Consistency ensures that the database remains in a valid state before and after the transaction.
In other words, the database schema must satisfy all constraints and rules, and any transaction that violates these constraints must be rolled back to maintain the consistency of the database.
ex: constraint balance should not be -ve
3. Isolation : Transactions are isolated from each other, preventing interference and conflicts between concurrent transactions. 
This property ensures that the actions of one transaction are invisible to other transactions until they are successfully committed.
Complete isolation of concurrently running transactions could mean that one transaction cannot perform an insert into a table being queried by another transaction.
Therefore, real-world considerations usually require a compromise between perfect transaction isolation and performance.
Dirty reads: reading uncommitted data
Non-repeatable reads: data changes between two reads
Phantom reads: new rows appear during a transaction
4. Durability : Once a transaction is successfully committed, its effects are permanent. 
Even in the face of system crashes or power failures, the changes made by committed transactions are retained, and the database is able to recover to a consistent state upon restarting.

Atomicity is managed using ROLLBACK in case of errors, preventing partial updates.
Consistency is enforced via constraints (e.g., foreign keys, unique keys) to maintain data integrity.
Isolation is implemented through locks to avoid conflicts between concurrent transactions.
Durability is achieved by persisting transactions, ensuring that they are not lost once committed, even in the event of a failure.
